[{"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\index.js":"1","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\App.js":"2","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\GlobalState.js":"3","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Home\\Home.js":"4","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Nav\\Nav.js":"5","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Login\\Login.js":"6","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Signup\\Signup.js":"7","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Schedule\\Schedule.js":"8","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Appointment\\Appointment.js":"9","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\About\\About.js":"10","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Medicines\\Medicines.js":"11","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\HealthArticles\\HealthArticles.js":"12","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Diagnostics\\Diagnostics.js":"13","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\reducers.js":"14","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\auth.js":"15","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\api.js":"16","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\queries.js":"17","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\mutations.js":"18","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\actions.js":"19"},{"size":317,"mtime":1615992184296,"results":"20","hashOfConfig":"21"},{"size":5238,"mtime":1618910953874,"results":"22","hashOfConfig":"21"},{"size":515,"mtime":1615992184297,"results":"23","hashOfConfig":"21"},{"size":2271,"mtime":1618845783873,"results":"24","hashOfConfig":"21"},{"size":4218,"mtime":1618850909397,"results":"25","hashOfConfig":"21"},{"size":4450,"mtime":1618826925369,"results":"26","hashOfConfig":"21"},{"size":3330,"mtime":1618827317122,"results":"27","hashOfConfig":"21"},{"size":5592,"mtime":1618851056665,"results":"28","hashOfConfig":"21"},{"size":8510,"mtime":1618851248928,"results":"29","hashOfConfig":"21"},{"size":3662,"mtime":1618671366944,"results":"30","hashOfConfig":"21"},{"size":2983,"mtime":1618841189984,"results":"31","hashOfConfig":"21"},{"size":3907,"mtime":1618899331166,"results":"32","hashOfConfig":"21"},{"size":2700,"mtime":1618900632930,"results":"33","hashOfConfig":"21"},{"size":700,"mtime":1615992184298,"results":"34","hashOfConfig":"21"},{"size":1060,"mtime":1615992184297,"results":"35","hashOfConfig":"21"},{"size":1037,"mtime":1615992184287,"results":"36","hashOfConfig":"21"},{"size":233,"mtime":1615992184298,"results":"37","hashOfConfig":"21"},{"size":1649,"mtime":1615992184298,"results":"38","hashOfConfig":"21"},{"size":165,"mtime":1615992184297,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1mce8if",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\index.js",[],["84","85"],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\App.js",["86","87"],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\GlobalState.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Home\\Home.js",["88","89"],"import React from \"react\";\r\nimport { Container, Text, Heading, Box, Center } from \"@chakra-ui/react\";\r\nimport logo from './virtualmediclogo.png';\r\nimport \"./home.css\";\r\n\r\n\r\n\r\n\r\n\r\n// fontSize={{ base: \"20px\", md: \"34px\", lg: \"40px\" }}padding=\"3\" margin=\"0 0 20px 0\"\r\n\r\n  \r\n\r\nconst Home = () => {\r\n\r\nreturn (\r\n\r\n  //<Container maxW=\"xl\" centerContent>\r\n      <Center>\r\n        <Box \r\n        padding=\"6\"  \r\n        bgColor=\"white\"\r\n        boxShadow=\"dark-lg\"\r\n        borderRadius=\"lg\" \r\n        color=\"black\" \r\n        maxW=\"3xl\"\r\n        width=\"100%\"\r\n        > \r\n\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"5\" color=\"grey\" >\r\n          <Center>\r\n            \r\n           Welcome to\r\n        \r\n        \r\n          </Center>\r\n        </Heading>\r\n        <Center>\r\n        <img src={logo} width=\"180\" height=\"\"/>\r\n        </Center>\r\n          \r\n        <div className=\"text\">\r\n        <Text fontSize=\"xl\" > \r\n          <Center>\r\n            Visit your Doctor from Anywhere! 24/7 Consultation.\r\n          </Center>\r\n        </Text>\r\n        \r\n        </div>\r\n\r\n        <div className=\"text\">\r\n        <Text fontSize=\"lg\" color=\"grey\" > \r\n          <Center>\r\n            Get Instant Medical help in Just three steps. As Simple as 1,2,3\r\n            \r\n          </Center>\r\n        </Text>\r\n        \r\n        </div>\r\n        <div className=\"cardcontainer\">\r\n        <div class=\"card\">\r\n          \r\n          <div class=\"card__cover cover1\">\r\n              \r\n          </div>\r\n\r\n          \r\n          <div class=\"card__content\">\r\n             <Center>Signup</Center> \r\n          </div>\r\n          \r\n         </div>\r\n\r\n\r\n         <div class=\"card\">\r\n          \r\n          <div class=\"card__cover cover2\">\r\n              \r\n          </div>\r\n\r\n          \r\n          <div class=\"card__content\">\r\n             <Center>Schedule a Video Call</Center> \r\n          </div>\r\n          \r\n         </div>\r\n\r\n         <div class=\"card\">\r\n          \r\n          <div class=\"card__cover\">\r\n              \r\n          </div>\r\n\r\n          \r\n          <div class=\"card__content\">\r\n             <Center>Join the Video Call</Center> \r\n          </div>\r\n          \r\n         </div>\r\n        </div>\r\n\r\n        \r\n        </Box>\r\n      </Center>\r\n  //</Container>\r\n  \r\n  \r\n);\r\n};\r\n\r\n\r\nexport default Home;\r\n","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Nav\\Nav.js",["90"],"\r\nimport React from \"react\";\r\nimport { Box, Heading, Flex, Text, Button, Link } from \"@chakra-ui/react\";\r\nimport \"./Nav.css\";\r\nimport Auth from \"../../utils/auth\"\r\nimport logo from './virtualmediclogo.png';\r\n\r\nconst MenuItems = ({ children }) => (\r\n  <Text mt={{ base: 4, md: 0 }} mr={6} display=\"block\">\r\n    {children}\r\n  </Text>\r\n);\r\n\r\n// Note: This code could be better, so I'd recommend you to understand how I solved and you could write yours better :)\r\nconst Nav = props => {\r\n  const [show, setShow] = React.useState(false);\r\n  const handleToggle = () => setShow(!show);\r\n\r\n  return (\r\n    <Flex\r\n      as=\"nav\"\r\n      align=\"center\"\r\n      justify=\"space-between\"\r\n      wrap=\"wrap\"\r\n      padding=\"1.5rem\"\r\n      bgColor=\"white\"\r\n      color=\"black\"\r\n      borderRadius=\"sm\"\r\n      {...props}\r\n    >\r\n      <Flex align=\"center\" mr={5}>\r\n        <Heading as=\"h1\" size=\"2xl\" letterSpacing={\"-.1rem\"} >\r\n        <Link href=\"/\">  \r\n        <img src={logo} width=\"180\" height=\"\"/>\r\n        </Link>\r\n        </Heading>\r\n      </Flex>\r\n\r\n      <Box display={{ base: \"block\", md: \"none\" }} onClick={handleToggle}>\r\n        <svg\r\n          fill=\"white\"\r\n          width=\"12px\"\r\n          viewBox=\"0 0 20 20\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <title>Menu</title>\r\n          <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n        </svg>\r\n      </Box>\r\n\r\n      <Box\r\n        display={{ sm: show ? \"block\" : \"none\", md: \"flex\" }}\r\n        width={{ sm: \"full\", md: \"auto\" }}\r\n        alignItems=\"center\"\r\n        flexGrow={1}\r\n      >\r\n        <MenuItems className=\"active\" >\r\n        {\r\n          Auth.loggedIn() ?\r\n              <Link href=\"/Appointment\">My Appointment</Link>\r\n                :\r\n                null\r\n        }\r\n        </MenuItems>\r\n\r\n        <MenuItems>\r\n        {\r\n          Auth.loggedIn() ?\r\n          <Link href=\"/schedule\">Schedule a Video Call</Link>\r\n            :\r\n          <Link href=\"/\">Schedule a Video Call</Link>\r\n        }\r\n        </MenuItems>\r\n\r\n        <MenuItems>\r\n        {\r\n          Auth.loggedIn() ?\r\n          <Link href=\"/signup\">Sign up</Link>\r\n            :\r\n          <Link href=\"/signup\">Sign up</Link>\r\n        }\r\n        </MenuItems>\r\n        \r\n        \r\n\r\n        <MenuItems>\r\n        {\r\n          Auth.loggedIn() ?\r\n          <Link href=\"/Diagnostics\">Diagnostics</Link>\r\n            :\r\n          <Link href=\"/Diagnostics\">Diagnostics</Link>\r\n        }\r\n        </MenuItems>\r\n\r\n        <MenuItems>\r\n        {\r\n          Auth.loggedIn() ?\r\n          <Link href=\"/Medicines\">Medicines</Link>\r\n            :\r\n          <Link href=\"/Medicines\">Medicines</Link>\r\n        }\r\n        </MenuItems>\r\n\r\n        <MenuItems>\r\n        {\r\n          Auth.loggedIn() ?\r\n          <Link href=\"/HealthArticles\">Health Articles</Link>\r\n            :\r\n          <Link href=\"/HealthArticles\">Health Articles</Link>\r\n        }\r\n        </MenuItems>\r\n        <MenuItems>\r\n        {\r\n          Auth.loggedIn() ?\r\n          <Link href=\"/About\">About Us</Link>\r\n            :\r\n          <Link href=\"/About\">About Us</Link>\r\n        }\r\n        </MenuItems>\r\n\r\n      </Box>\r\n\r\n      <Box\r\n        display={{ sm: show ? \"block\" : \"none\", md: \"block\" }}\r\n        mt={{ base: 4, md: 0 }}\r\n      >\r\n        <Button bg=\"transparent\" border=\"1px\">\r\n        {\r\n          Auth.loggedIn() ?\r\n            <Link href=\"/logout\" onClick={() => Auth.logout()} bg=\"transparent\">Logout</Link>\r\n            :\r\n            <Link href=\"/login\" bg=\"transparent\">Log In</Link>\r\n        }\r\n        </Button>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n\r\n\r\n// import React from \"react\"\r\n// import { Box, Text } from \"@chakra-ui/react\"\r\n// import \"./Nav.css\";\r\n// import Auth from \"../../utils/auth\"\r\n\r\n// export default function Logo(props) {\r\n//   return (\r\n//     <Box {...props}>\r\n//       <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n//         Logo\r\n//       </Text>\r\n//     </Box>\r\n//   )\r\n// }\r\n\r\n\r\n// function Nav() {\r\n//  return (\r\n     \r\n//     <div className=\"topnav\">\r\n\r\n            \r\n            \r\n//           <a href=\"#contact\">Contact</a>\r\n//           <a href=\"#about\">About</a>\r\n//         </div>\r\n//         )\r\n//     }\r\n// export default Nav","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Login\\Login.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Signup\\Signup.js",["91"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from \"../../utils/auth\";\r\nimport \"./signup.css\";\r\nimport { ADD_USER } from \"../../utils/mutations\";\r\nimport { Container, Box, Text, Heading, FormControl, FormLabel, Input, Button, Center } from \"@chakra-ui/react\";\r\n\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email, password: formState.password,\r\n        firstName: formState.firstName, lastName: formState.lastName\r\n      }\r\n    });\r\n    console.log(mutationResponse);\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    //<Container>\r\n    <Center>\r\n      <Box \r\n      className=\"maindivi\"\r\n      padding=\"4\"  \r\n      bgColor=\"white\"\r\n      boxShadow=\"dark-lg\"\r\n      borderRadius=\"lg\" \r\n      color=\"black\"\r\n      maxW=\"3xl\"> \r\n      \r\n        <div className=\"leftdivi\">\r\n\r\n        </div>\r\n\r\n        <div className=\"rightdivi\">\r\n        <Heading  color=\"black\" as=\"h6\" padding=\"3\" align=\"center\">Signup</Heading>\r\n      <FormControl>\r\n              <FormLabel color=\"black\">First Name</FormLabel>\r\n              <Input type=\"firstName\" placeholder=\"Your First Name\"\r\n                  name=\"firstName\"\r\n                  id=\"firstName\"\r\n                  color=\"black\"\r\n                  onChange={handleChange}/>\r\n                  <FormLabel color=\"black\">Last Name</FormLabel>\r\n              <Input type=\"lastName\" placeholder=\"Your Last Name\"\r\n                  name=\"lastName\"\r\n                  id=\"lastName\"\r\n                  color=\"black\"\r\n                  onChange={handleChange}/>\r\n              <FormLabel color=\"black\">Email address</FormLabel>\r\n              <Input type=\"email\" placeholder=\"youremail@test.com\"\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  color=\"black\"\r\n                  onChange={handleChange}/>\r\n              <FormLabel color=\"black\">Password</FormLabel>\r\n              <Input placeholder=\"******\" type=\"password\"\r\n                  name=\"password\"            \r\n                  id=\"pwd\"\r\n                  color=\"black\"\r\n                  onChange={handleChange} />\r\n            <Button\r\n                mt={4}\r\n                width=\"100%\"\r\n                colorScheme=\"blue\"\r\n                type=\"submit\"\r\n                textAlign=\"center\"\r\n                onClick={handleFormSubmit}\r\n              >\r\n                Submit\r\n              </Button>\r\n\r\n              <Center><Link to=\"/login\">\r\n                <Text color=\"blue\" fontSize=\"sm\"\r\n                mt={4}\r\n                >\r\n                  Already have an account? <strong>Login</strong>\r\n                </Text>       \r\n              </Link>\r\n              </Center>\r\n      </FormControl>\r\n        </div>\r\n     \r\n      </Box>\r\n    </Center>\r\n   // </Container>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default Signup;\r\n","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Schedule\\Schedule.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Appointment\\Appointment.js",["92"],"import React, { useState, useEffect } from \"react\";\r\nimport { useMutation, useQuery, /* useDisclosure */ } from '@apollo/react-hooks';\r\nimport { CANCEL_APPOINTMENT, CHANGE_APPOINTMENT } from \"../../utils/mutations\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, \r\n          Heading, \r\n          FormControl, \r\n          FormLabel, \r\n          Input, \r\n          Button, \r\n          ButtonGroup,\r\n          Select, \r\n          Text, \r\n          Box, \r\n        Flex } from \"@chakra-ui/react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { ME } from \"../../utils/queries\";\r\n\r\n\r\nfunction Appointment() {\r\n    // defining a state for the time for the schedule\r\n  const [,  setStartDate] = useState(new Date());\r\n  const [ok, setOK] = useState(false);\r\n  const [deleted, setDeleted] = useState(false);\r\n  let email = '';\r\n  const {data} = useQuery(ME);\r\n  //let a = data.me.email;\r\n  console.log(data);\r\n    \r\n    // defining a custon input for the datepicker\r\n    const CustomInput = ({ value, onClick }) => (\r\n        <Input type=\"day\" placeholder=\"mm/dd/yyy\"\r\n                name=\"day\"\r\n                color=\"black\"\r\n                onClick={onClick}\r\n                onChange={handleChange}\r\n                value={formState.day}/>\r\n      ); \r\n\r\n  const [formState, setFormState] = useState({ day: '', time: ''});\r\n  const [isData, setIsData] = useState(false);\r\n\r\n  const [removeAppointment] = useMutation(CANCEL_APPOINTMENT);\r\n  const [changeAppointment] = useMutation(CHANGE_APPOINTMENT);\r\n \r\n  const [link, setLink] = useState('');\r\n\r\n  useEffect(() => {\r\n    if(data){\r\n      if(data.me.appointment[0])\r\n      {\r\n        console.log(data.me.appointment[0]);\r\n         setLink(data.me.appointment[0].link); \r\n         email = data.me.email;\r\n         setFormState({...formState, day: data.me.appointment[0].day, time:data.me.appointment[0].time })\r\n         setIsData(true);\r\n      }\r\n     \r\n    }\r\n    \r\n  }, [data]);\r\n  \r\n  const handleFormSubmitCancel = async event => {\r\n    event.preventDefault();\r\n\r\n    if(data.me.appointment[0])\r\n    {\r\n\r\n      try{\r\n        const info = await removeAppointment({\r\n       variables: {\r\n         day: formState.day, time: formState.time, link: link\r\n       }\r\n     });\r\n   \r\n     console.log(info);\r\n \r\n     }catch (e) {\r\n         console.log(e)\r\n     }\r\n  \r\n \r\n     /*****************************************************/\r\n     /**Sending the mail with nodemailer */\r\n \r\n     let response = await fetch('/mail', {\r\n       method: \"POST\",\r\n       body: JSON.stringify({\r\n           day: formState.day,\r\n           time: formState.time,\r\n           link: link,\r\n           mail: email, \r\n           subject: 'Appointment Canceled on '\r\n       }),\r\n       headers: {\r\n           Accept: 'application/json',\r\n           'Content-Type': 'application/json'\r\n         },\r\n     }),\r\n       message = await response.json();\r\n       console.log(message);\r\n         //window.location.reload('/'); // we need to make anoter component to congratule the success of the operation\r\n \r\n     /*****************************************************/\r\n \r\n     /*****************setOK all operations ok***********************/\r\n    \r\n     setDeleted(true);\r\n     \r\n     /*****************************************************/\r\n\r\n    }\r\n    else{\r\n      setDeleted(false)\r\n    }\r\n    \r\n  };\r\n\r\n  const handleFormSubmitUpdate = async event => {\r\n      event.preventDefault();\r\n  \r\n      try{\r\n  \r\n         await changeAppointment({     \r\n               variables: {day: formState.day, time: formState.time, link: link }    \r\n              })\r\n    /*   \r\n      if(data)\r\n           email = data.me.email; */\r\n  \r\n      }catch (e) {\r\n          console.log(e)\r\n      }\r\n  \r\n      /*****************************************************/\r\n      /**Sending the mail with nodemailer */\r\n  \r\n      let response = await fetch('/mail', {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n            day: formState.day,\r\n            time: formState.time,\r\n            link: link,\r\n            mail: email, \r\n            subject: 'Appointment Rescheduled on '\r\n        }),\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n      }),\r\n        message = await response.json();\r\n        console.log(message);\r\n          //window.location.reload('/'); // we need to make anoter component to congratule the success of the operation\r\n  \r\n      /*****************************************************/\r\n  \r\n      /*****************setOK all operations ok***********************/\r\n     \r\n      setOK(true);\r\n      \r\n      /*****************************************************/\r\n    };\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n    <Box \r\n        padding=\"4\"  \r\n        bgcolor=\"white\"\r\n        bgGradient=\"linear(to-r,blue.900,gray.500,blue.900)\" \r\n        borderRadius=\"lg\" \r\n        color=\"black\" \r\n        maxW=\"3xl\"> \r\n      <Heading  color=\"white\" as=\"h2\" size=\"xl\" fontSize={{ base: \"16px\", md: \"20px\", lg: \"30px\" }} padding=\"3\">My Appointment</Heading>\r\n     {\r\n      isData ?\r\n        <FormControl isRequired>\r\n        <FormLabel color=\"white\">Select day</FormLabel>\r\n        <DatePicker id=\"day\" name=\"day\"\r\n              dateFormat=\"MM/dd/yyyy\"\r\n              minDate={new Date()}\r\n              onChange={date => {setStartDate(date); setFormState({...formState, day: date.toLocaleDateString(\"en-US\")});}}\r\n              customInput={<CustomInput/>}\r\n          />\r\n        <FormLabel color=\"white\">Time (Hr)</FormLabel>\r\n        <Select placeholder=\"Select option\" id=\"time\" name=\"time\" defaultValue={formState.time} onChange={handleChange} focusBorderColor=\"blue\" color=\"white\" borderColor=\"blue\">\r\n              <option value=\"12:00pm\">12:00pm</option>\r\n              <option value=\"2:00pm\">2:00pm</option>\r\n              <option value=\"4:00pm\">4:00pm</option>\r\n          </Select>\r\n          { !ok ?\r\n          <Text color=\"white\" fontSize=\"sm\" py=\"3\">Link: <a href={link} target=\"_blank\" rel=\"noreferrer\">{link}</a></Text>\r\n              : \r\n              null\r\n          } \r\n           { deleted ?\r\n            <Box>\r\n              <Text  padding=\"3\"></Text>\r\n                <Text color=\"white\" fontSize=\"sm\">Your Appointment has been Canceled!</Text>   \r\n            </Box>\r\n            : null\r\n           }\r\n           { ok ?\r\n            <Box>\r\n              <Text  padding=\"3\"></Text>\r\n                <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }}>An email was sent with the information below </Text>\r\n                <Box borderRadius=\"md\">\r\n                    <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }}>Day: {formState.day} </Text>\r\n                    <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }}>Time: {formState.time}</Text>\r\n                    <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }} >Link: <a href={link} target=\"_blank\" rel=\"noreferrer\">{link}</a></Text>\r\n                </Box>   \r\n            </Box>\r\n            : null\r\n           }\r\n           <Flex>\r\n              <Box>\r\n              <ButtonGroup flexWrap=\"wrap\" size=\"sm\" spacing=\"4\">\r\n                  <Button\r\n                      mt={4}\r\n                      colorScheme=\"teal\"\r\n                      type=\"submit\"\r\n                      onClick={handleFormSubmitUpdate}\r\n                  >\r\n                  Reschedule\r\n                  </Button>\r\n                  <Button\r\n                      mt={4}\r\n                      colorScheme=\"teal\"\r\n                      type=\"submit\"\r\n                      onClick={handleFormSubmitCancel}\r\n                  >\r\n                  Cancel\r\n                  </Button>\r\n              </ButtonGroup>\r\n              </Box> \r\n              \r\n           </Flex>        \r\n        </FormControl>        \r\n        :\r\n        <Box>\r\n          <Text color=\"white\" fontSize=\"sm\" py=\"3\">You don't have an Appointment Registered</Text>\r\n          <Link to=\"/schedule\">\r\n          <Text color=\"white\" fontSize=\"sm\">\r\n                  ← Go to Schedule\r\n          </Text>       \r\n        </Link>\r\n      </Box>\r\n\r\n      \r\n    }\r\n       \r\n    </Box>\r\n    </Container>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default Appointment;\r\n","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\About\\About.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Medicines\\Medicines.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\HealthArticles\\HealthArticles.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\components\\Diagnostics\\Diagnostics.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\reducers.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\auth.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\api.js",["93"],"const newRoomEndpoint =\r\n  `https://api.daily.co/v1/rooms`; // API\r\n\r\n/**\r\n * Create a short-lived room for demo purposes.\r\n *\r\n * It uses the redirect proxy as specified in netlify.toml`\r\n * This will work locally if you following the Netlify specific instructions\r\n * in README.md\r\n *\r\n * See https://docs.daily.co/reference#create-room for more information on how\r\n * to use the Daily REST API to create rooms and what options are available. \r\n */\r\nasync function createRoom() {\r\n\r\n  const exp = Math.round(Date.now() / 1000) + 60 * 30; //it is just last 30 min the room... we need it last the time the meeting is set\r\n  const options = {\r\n    properties: {\r\n      exp: exp,\r\n    },\r\n  };\r\n  let response = await fetch(newRoomEndpoint, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(options),\r\n    headers: {\r\n      Authorization: \"Bearer 6f137cc133efcb55ef2f00e4e042f76442ae03e2b444c89b5dbbe7376f328b22\" // that's my API key\r\n    },\r\n  }),\r\n    room = await response.json();\r\n  return room;\r\n\r\n}\r\n\r\nexport default { createRoom };\r\n","C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\queries.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\mutations.js",[],"C:\\Users\\ankit\\Desktop\\VirtualMedic\\VirtualMedic\\client\\src\\utils\\actions.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":5,"column":3,"nodeType":"100","messageId":"101","endLine":5,"endColumn":9},{"ruleId":"98","severity":1,"message":"102","line":6,"column":3,"nodeType":"100","messageId":"101","endLine":6,"endColumn":7},{"ruleId":"98","severity":1,"message":"103","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":39,"column":9,"nodeType":"106","endLine":39,"endColumn":48},{"ruleId":"104","severity":1,"message":"105","line":34,"column":9,"nodeType":"106","endLine":34,"endColumn":48},{"ruleId":"98","severity":1,"message":"103","line":7,"column":10,"nodeType":"100","messageId":"101","endLine":7,"endColumn":19},{"ruleId":"107","severity":1,"message":"108","line":57,"column":18,"nodeType":"109","endLine":57,"endColumn":31},{"ruleId":"110","severity":1,"message":"111","line":34,"column":1,"nodeType":"112","endLine":34,"endColumn":31},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Assignments to the 'email' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]